pragma solidity 0.8.14;
import "./libraries/Pairing.sol";

contract PoseidonCommitmentVerifier {
	struct CommitmentMappingVerifyingKey {
		Pairing.G1Point alfa1;
		Pairing.G2Point beta2;
		Pairing.G2Point gamma2;
		Pairing.G2Point delta2;
		Pairing.G1Point[] IC;
	}
	struct CommitmentMappingProof {
		Pairing.G1Point A;
		Pairing.G2Point B;
		Pairing.G1Point C;
	}

	function commitmentMappingVerifyingKey() internal pure returns (CommitmentMappingVerifyingKey memory vk) {
		vk.alfa1 = Pairing.G1Point(
			20491192805390485299153009773594534940189261866228447918068658471970481763042,
			9383485363053290200918347156157836566562967994039712273449902621266178545958
		);

		vk.beta2 = Pairing.G2Point(
			[
				4252822878758300859123897981450591353533073413197771768651442665752259397132,
				6375614351688725206403948262868962793625744043794305715222011528459656738731
			],
			[
				21847035105528745403288232691147584728191162732299865338377159692350059136679,
				10505242626370262277552901082094356697409835680220590971873171140371331206856
			]
		);
		vk.gamma2 = Pairing.G2Point(
			[
				11559732032986387107991004021392285783925812861821192530917403151452391805634,
				10857046999023057135944570762232829481370756359578518086990519993285655852781
			],
			[
				4082367875863433681332203403145435568316851327593401208105741076214120093531,
				8495653923123431417604973247489272438418190587263600148770280649306958101930
			]
		);
		vk.delta2 = Pairing.G2Point(
			[
				3673211675016421152898753296628825860216932366390186010677799865826414453848,
				12187699871175162520563728271005448007532901953735825388995760195666107108114
			],
			[
				13470677720427558424120778727381771465638492325145587444004169485617282907717,
				3928142835555125189531367984506784025840943097435080817927126896881468426417
			]
		);
		vk.IC = new Pairing.G1Point[](34);

		vk.IC[0] = Pairing.G1Point(
			4795191551222101489305747239686725404646279919894677853631739899938973384052,
			1373586094791930197309215040841139803062323372406408816583360788007439296945
		);

		vk.IC[1] = Pairing.G1Point(
			13113183227081184987644074880786553266328079865006426465785441334252795690294,
			18753711890950305174219463925403101789262054477967293165993158398244452357334
		);

		vk.IC[2] = Pairing.G1Point(
			1457803216951495533496028056411068510755062380597369393018989800889407158850,
			11254846360191053722871534028616557758610518584856689904573871703124909443969
		);

		vk.IC[3] = Pairing.G1Point(
			8470295912803698886024948279633626974767479255380260007514469149219196285591,
			7710898327217166714598701364342042401151975049073776268821968563373494495031
		);

		vk.IC[4] = Pairing.G1Point(
			6849081198715854254099463546841658245207045607039507385181078195512611163018,
			21575359392901342786524496970644265010099770146783985965849459317318159068303
		);

		vk.IC[5] = Pairing.G1Point(
			17256895879384895053898031826183624095413764703927605078207183361196362439188,
			4223727400694151053038999394850898656355729003010210112013153257375899184749
		);

		vk.IC[6] = Pairing.G1Point(
			11277638186624958192473974808032103087119944940691139312387356848671791461269,
			177566017078008855758375087884185251523734027994781159427942501224270110323
		);

		vk.IC[7] = Pairing.G1Point(
			3949184504328302681344753079530768997001171799812236613588309481401519390765,
			15853822716040551365780499784904727776441140221273182481262478167207484336656
		);

		vk.IC[8] = Pairing.G1Point(
			3539121768872813206609794467980590379212837050946489392444780996350996136065,
			3922883352986539471033765773675276278142619109403733580220602160821917146216
		);

		vk.IC[9] = Pairing.G1Point(
			2876441234631667977250209580698528690896448532889340929833134524756467509174,
			15962923295273447889353047676257249002015642947577544584911932064063338332752
		);

		vk.IC[10] = Pairing.G1Point(
			2743095913222794646248768536068132751062910861877710035840483104432774045361,
			1929868971660472284860872845179905165576983022428893073692521240088598734129
		);

		vk.IC[11] = Pairing.G1Point(
			16506876686171874674156419854926715978704633069866064607196353739878940606477,
			15080226275320212354052583454393952898131928022676352025662199182332420779815
		);

		vk.IC[12] = Pairing.G1Point(
			19597057087406450021178176069695876922399962725231206403775835873297063269572,
			7096650376640542356672904160495942021769695417427824190668965121056746023876
		);

		vk.IC[13] = Pairing.G1Point(
			21560037854067516299037638337470754471675994834903466370370150346657424387446,
			11681037958635598963372112671637490909615366882333504629440913796429660715018
		);

		vk.IC[14] = Pairing.G1Point(
			12873753248740368072475985637056621455677382233305046370093910258916825247245,
			7130117706956753646523965993765396586045347494474764856640517905235429483335
		);

		vk.IC[15] = Pairing.G1Point(
			6390246008683175830052501719759149130328680627558701690364370376398243852645,
			21042083301279734192841064691661742205628538972758690069563873974070213880519
		);

		vk.IC[16] = Pairing.G1Point(
			9190361621173462852233083398495392871080898322303749032767914455996034256014,
			3166853231778333185040665510513264409238787808299535890881133005924112508058
		);

		vk.IC[17] = Pairing.G1Point(
			10528735437273101347940921665898344944312763281001302504582127173497146410650,
			12380918075954273893867517323128986284380771938020945018358974247457880251494
		);

		vk.IC[18] = Pairing.G1Point(
			18565816180642371490054834904337694233062016555224366039901620399360638143787,
			13348038710466240945159586471207455434337910512073338009165064190760234069484
		);

		vk.IC[19] = Pairing.G1Point(
			11627405508481850140993355225908727010943843388055241670429716392792671786570,
			11636765145979465572366983973459057642535663157570822605228614274589821410115
		);

		vk.IC[20] = Pairing.G1Point(
			7210806950322513829208502267236533528603926122553095787092626285527861372501,
			18294507783553194491561296585085377792539810729101581629666866157355971500513
		);

		vk.IC[21] = Pairing.G1Point(
			4784563431697238472835563380324941776380101762296690120965848578511979194172,
			18793068013197121255384966076264688363354310204821475864690755582198660936763
		);

		vk.IC[22] = Pairing.G1Point(
			5529655685369670650572348079280364264093110161290265927182855430726156793160,
			9646729969125722115539793202800781514920954390593112101309082306156196654844
		);

		vk.IC[23] = Pairing.G1Point(
			4453561650954751757891022837446150182313826316516412303017591914927981485707,
			7265134375634667316890055868560567781169241440944741739400905824666995810067
		);

		vk.IC[24] = Pairing.G1Point(
			12116766101738333194513364502203738608793382688076122255341194048730392856811,
			10624160921924740827280661107653238672563136901881810447868837068749679616319
		);

		vk.IC[25] = Pairing.G1Point(
			6251698205636783031722670792199881941935110174104794783187283860162986283407,
			11711502304035455088593621997266597595478071378282423473187806531689609022915
		);

		vk.IC[26] = Pairing.G1Point(
			7572621288357304896610941327683629553031083027677247988480702962701425841813,
			11525475541920950135954124618008822096567193784061136988453069022775703412298
		);

		vk.IC[27] = Pairing.G1Point(
			3356470642930272719456491737996917445140853270316619572709676710308085030210,
			2522662145931702141522208203853708879317675123203606222838628398243049618390
		);

		vk.IC[28] = Pairing.G1Point(
			20618769397246956774205784576708613229231934369100862770855080926153570563111,
			16104164871487573776167264794163504912051248113059114003722745538640057047886
		);

		vk.IC[29] = Pairing.G1Point(
			2774247457687250488439686234085658018824512082599513667319755852550914511241,
			6638819334928947755062145116222027431715248684461588185114685004312584337028
		);

		vk.IC[30] = Pairing.G1Point(
			9636266977473697624310653551756081264817998080004658884863290987165727789250,
			3341965601435906331877626172092684520261414702972085815587198485185818686506
		);

		vk.IC[31] = Pairing.G1Point(
			8795884974584280997930826730988359087662864888764652468867604287844472198667,
			18522490985949073699848740388401516427267750228537720561157929400956452642960
		);

		vk.IC[32] = Pairing.G1Point(
			20037446854735117821807316443090415103518086688914825640022089006200511712239,
			20448902132641114929957440424516430049008631146006193102619481246321448384331
		);

		vk.IC[33] = Pairing.G1Point(
			6422341509342503621458163846361336365061348644156209294032409964334776978688,
			19090547320127398500863057386563257425922444858080548954056808957681195091218
		);
	}

	function verifyCommitmentMapping(uint256[] memory input, CommitmentMappingProof memory proof) internal view returns (uint256) {
		uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
		CommitmentMappingVerifyingKey memory vk = commitmentMappingVerifyingKey();
		require(input.length + 1 == vk.IC.length, "verifier-bad-input");
		// Compute the linear combination vk_x
		Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
		for (uint256 i = 0; i < input.length; i++) {
			require(input[i] < snark_scalar_field, "verifier-gte-snark-scalar-field");
			vk_x = Pairing.addition(
				vk_x,
				Pairing.scalar_mul(vk.IC[i + 1], input[i])
			);
		}
		vk_x = Pairing.addition(vk_x, vk.IC[0]);
		if (
			!Pairing.pairingProd4(
				Pairing.negate(proof.A),
				proof.B,
				vk.alfa1,
				vk.beta2,
				vk_x,
				vk.gamma2,
				proof.C,
				vk.delta2
			)
		) return 1;
		return 0;
	}

	/// @return r  bool true if proof is valid
	function verifyCommitmentMappingProof(
		uint256[2] memory a,
		uint256[2][2] memory b,
		uint256[2] memory c,
		uint256[33] memory input
	) public view returns (bool r) {
		CommitmentMappingProof memory proof;
		proof.A = Pairing.G1Point(a[0], a[1]);
		proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
		proof.C = Pairing.G1Point(c[0], c[1]);
		uint256[] memory inputValues = new uint256[](input.length);
		for (uint256 i = 0; i < input.length; i++) {
			inputValues[i] = input[i];
		}
		if (verifyCommitmentMapping(inputValues, proof) == 0) {
			return true;
		} else {
			return false;
		}
	}
}
